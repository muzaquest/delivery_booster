"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∂–∏–≤–æ–º—É API
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API –∏ –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
"""

import os
import sys
import json
from datetime import date, timedelta

sys.path.append('/workspace')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
os.environ.setdefault("STATS_API_BASE", "http://5.187.7.140:3000")

def test_api_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API"""
    
    print("üîå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ñ–ò–í–û–ú–£ API")
    print("=" * 60)
    
    try:
        from etl.api_client import fetch_restaurant_stats
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        restaurant_name = "Only Kebab"
        source = "grab"
        start_date = date.today() - timedelta(days=7)
        end_date = date.today() - timedelta(days=1)
        
        print(f"üìä –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:")
        print(f"   –†–µ—Å—Ç–æ—Ä–∞–Ω: {restaurant_name}")
        print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {source}")
        print(f"   –ü–µ—Ä–∏–æ–¥: {start_date} ‚Äî {end_date}")
        print()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        result = fetch_restaurant_stats(restaurant_name, source, start_date, end_date)
        
        if result and 'data' in result:
            data = result['data']
            print(f"‚úÖ API –†–ê–ë–û–¢–ê–ï–¢!")
            print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(data)}")
            print(f"üè™ –†–µ—Å—Ç–æ—Ä–∞–Ω: {result.get('restaurant_name')}")
            print(f"üì± –ò—Å—Ç–æ—á–Ω–∏–∫: {result.get('source')}")
            print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {result.get('period')}")
            print()
            
            if data:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å
                first_record = data[0]
                print("üîç –ü–†–ò–ú–ï–† –î–ê–ù–ù–´–• (–ø–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å):")
                print("-" * 40)
                
                key_fields = ['stat_date', 'sales', 'orders', 'ads_spend', 'ads_sales', 'rating']
                for field in key_fields:
                    if field in first_record:
                        print(f"   {field}: {first_record[field]}")
                
                print()
                print("üìã –í–°–ï –î–û–°–¢–£–ü–ù–´–ï –ü–û–õ–Ø:")
                print("-" * 30)
                for i, field in enumerate(sorted(first_record.keys()), 1):
                    print(f"   {i:2d}. {field}")
                
                return True
            else:
                print("‚ö†Ô∏è API —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç")
                return False
        else:
            print("‚ùå API –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ")
            return False
            
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö API: {e}")
        return False


def test_multiple_restaurants():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤"""
    
    print("\nüè™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ï–°–ö–û–õ–¨–ö–ò–• –†–ï–°–¢–û–†–ê–ù–û–í")
    print("=" * 60)
    
    restaurants = [
        "Only Kebab",
        "Ika Canggu", 
        "Asai Cafe",
        "Rasgulai"
    ]
    
    sources = ['grab', 'gojek']
    test_date = date.today() - timedelta(days=3)
    
    results = {}
    
    for restaurant in restaurants:
        results[restaurant] = {}
        
        for source in sources:
            try:
                from etl.api_client import fetch_restaurant_stats
                
                result = fetch_restaurant_stats(restaurant, source, test_date, test_date)
                
                if result and 'data' in result and result['data']:
                    record_count = len(result['data'])
                    first_record = result['data'][0]
                    sales = first_record.get('sales', 0)
                    orders = first_record.get('orders', 0)
                    
                    results[restaurant][source] = {
                        'status': '‚úÖ',
                        'records': record_count,
                        'sales': sales,
                        'orders': orders
                    }
                    print(f"‚úÖ {restaurant} ({source}): {record_count} –∑–∞–ø–∏—Å–µ–π, {sales:,} IDR, {orders} –∑–∞–∫–∞–∑–æ–≤")
                else:
                    results[restaurant][source] = {'status': '‚ùå', 'error': 'No data'}
                    print(f"‚ùå {restaurant} ({source}): –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                    
            except Exception as e:
                results[restaurant][source] = {'status': '‚ùå', 'error': str(e)}
                print(f"‚ùå {restaurant} ({source}): –æ—à–∏–±–∫–∞ - {e}")
    
    return results


def test_database_setup():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î"""
    
    print("\nüóÑÔ∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    db_url = os.getenv("DATABASE_URL")
    if not db_url:
        print("‚ö†Ô∏è DATABASE_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è SQLite")
        return False
    
    try:
        import psycopg2
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        with psycopg2.connect(db_url) as conn:
            with conn.cursor() as cursor:
                cursor.execute("SELECT version()")
                version = cursor.fetchone()[0]
                print(f"‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
                print(f"üìä –í–µ—Ä—Å–∏—è: {version}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
                cursor.execute("""
                    SELECT table_name 
                    FROM information_schema.tables 
                    WHERE table_schema = 'public' 
                    AND table_name IN ('raw_stats', 'restaurant_mapping', 'ml_jobs')
                """)
                
                tables = [row[0] for row in cursor.fetchall()]
                
                if tables:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ç–∞–±–ª–∏—Ü—ã: {', '.join(tables)}")
                else:
                    print("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü—ã –¥–ª—è –∂–∏–≤–æ–≥–æ API –Ω–µ —Å–æ–∑–¥–∞–Ω—ã")
                    print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python db/migrate_to_live_api.py")
                
                return True
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° –ñ–ò–í–´–ú API")
    print("=" * 70)
    print()
    
    # 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ë–î
    db_ok = test_database_setup()
    
    # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º API
    api_ok = test_api_connection()
    
    # 3. –ï—Å–ª–∏ API —Ä–∞–±–æ—Ç–∞–µ—Ç, —Ç–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
    if api_ok:
        restaurants_results = test_multiple_restaurants()
    
    print("\nüìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 30)
    print(f"üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ OK' if db_ok else '‚ùå –¢—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'}")
    print(f"üîå API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {'‚úÖ OK' if api_ok else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
    
    if api_ok and db_ok:
        print()
        print("üöÄ –ì–û–¢–û–í–û –ö –†–ê–ë–û–¢–ï –° –ñ–ò–í–´–ú–ò –î–ê–ù–ù–´–ú–ò!")
        print()
        print("üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å DATABASE_URL –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é: python db/migrate_to_live_api.py")
        print("3. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ: python etl/api_client.py 'Only Kebab'")
        print("4. –ü–µ—Ä–µ–æ–±—É—á–∏—Ç—å ML: python ml/training.py --from-db")
        print("5. –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –Ω–∞ Replit")
    else:
        print()
        print("‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –ù–ê–°–¢–†–û–ô–ö–ê")
        if not db_ok:
            print("- –ù–∞—Å—Ç—Ä–æ–∏—Ç—å PostgreSQL –∏ DATABASE_URL")
        if not api_ok:
            print("- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API (5.187.7.140:3000)")


if __name__ == "__main__":
    main()