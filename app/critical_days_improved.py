"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–Ω–µ–π —Å –≥–ª—É–±–æ–∫–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π:
- –£—á–µ—Ç –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –∏ –∏—Ö –≤–ª–∏—è–Ω–∏—è –Ω–∞ –ø—Ä–æ–¥–∞–∂–∏
- –ê–Ω–∞–ª–∏–∑ –ø–æ–≥–æ–¥–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ 
- ML-–∞–Ω–∞–ª–∏–∑ –±–µ–∑ —Ç—Ä–∏–≤–∏–∞–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å ROI
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from etl.data_loader import get_engine


def analyze_critical_days_improved(period: str, restaurant_id: int) -> str:
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–Ω–µ–π
    """
    try:
        start_str, end_str = period.split("_")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        try:
            df = pd.read_csv("/workspace/data/merged_dataset.csv", parse_dates=["date"])
            sub = df[(df["restaurant_id"] == restaurant_id) & (df["date"] >= start_str) & (df["date"] <= end_str)].copy()
        except:
            return "8. üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –î–ù–ò\n" + ("‚ïê" * 80) + "\n‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è ML-–∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏."
        
        if sub.empty:
            return "8. üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –î–ù–ò\n" + ("‚ïê" * 80) + "\nüìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."

        # –ù–∞—Ö–æ–¥–∏–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–Ω–∏ (–ø–∞–¥–µ–Ω–∏–µ ‚â•25% –æ—Ç –º–µ–¥–∏–∞–Ω—ã)
        daily = sub.groupby("date", as_index=False)["total_sales"].sum().sort_values("date")
        median_sales = float(daily["total_sales"].median()) if len(daily) else 0.0
        threshold = 0.75 * median_sales  # 25% –ø–∞–¥–µ–Ω–∏–µ
        critical_dates = daily.loc[daily["total_sales"] <= threshold, "date"].dt.normalize().tolist()

        lines = []
        lines.append("8. üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –î–ù–ò")
        lines.append("‚ïê" * 80)
        
        if not critical_dates:
            lines.append("‚úÖ –í –ø–µ—Ä–∏–æ–¥–µ –Ω–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–∞–ª–æ–≤ –ø—Ä–æ–¥–∞–∂ (–ø–∞–¥–µ–Ω–∏–µ >25% –æ—Ç –º–µ–¥–∏–∞–Ω—ã)")
            lines.append("")
            lines.append(f"üìä –ú–µ–¥–∏–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏: {_format_currency(median_sales)}")
            
            # –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –≤–Ω–µ—à–Ω–∏–º —Ñ–∞–∫—Ç–æ—Ä–∞–º
            weather_impact = _analyze_weather_impact_period(sub)
            holiday_impact = _analyze_holiday_impact_period(sub)
            
            if weather_impact['significant']:
                lines.append(f"üåßÔ∏è –í–ª–∏—è–Ω–∏–µ –ø–æ–≥–æ–¥—ã: {weather_impact['description']}")
            if holiday_impact['significant']:
                lines.append(f"üéå –í–ª–∏—è–Ω–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤: {holiday_impact['description']}")
                
            return "\n".join(lines)

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–Ω—å (–º–∞–∫—Å–∏–º—É–º 5)
        eng = get_engine()
        for i, critical_date in enumerate(critical_dates[:5]):
            if i > 0:
                lines.append("")  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –¥–Ω—è–º–∏
                
            day_analysis = _analyze_critical_day_improved(
                critical_date, sub, daily, median_sales, restaurant_id, start_str, end_str, eng
            )
            lines.extend(day_analysis)

        # –û–±—â–∏–µ –≤—ã–≤–æ–¥—ã –µ—Å–ª–∏ –±–æ–ª—å—à–µ 1 –¥–Ω—è
        if len(critical_dates) > 1:
            lines.append("")
            lines.append("üìä –û–ë–©–ò–ï –í–´–í–û–î–´")
            lines.append("‚îÄ" * 40)
            
            summary = _generate_period_summary_improved(critical_dates, sub, restaurant_id)
            lines.extend(summary)

        return "\n".join(lines)
        
    except Exception as e:
        return f"8. üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –î–ù–ò\n{'‚ïê' * 80}\n‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"


def _analyze_weather_impact_period(sub):
    """–ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –ø–æ–≥–æ–¥—ã –∑–∞ –ø–µ—Ä–∏–æ–¥"""
    try:
        if 'rain' not in sub.columns:
            return {'significant': False, 'description': ''}
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–∂–¥–ª–∏–≤—ã–µ –¥–Ω–∏
        sub['heavy_rain'] = (sub['rain'].fillna(0.0) >= 10.0).astype(int)
        by_rain = sub.groupby('heavy_rain')['total_sales'].mean().to_dict()
        
        if 0 in by_rain and 1 in by_rain:
            rain_effect = (by_rain[1] - by_rain[0]) / by_rain[0] * 100.0
            if abs(rain_effect) > 10:  # –ó–Ω–∞—á–∏–º–æ–µ –≤–ª–∏—è–Ω–∏–µ >10%
                direction = "—Å–Ω–∏–∂–µ–Ω–∏–µ" if rain_effect < 0 else "—É–≤–µ–ª–∏—á–µ–Ω–∏–µ"
                return {
                    'significant': True, 
                    'description': f'{direction} –ø—Ä–æ–¥–∞–∂ –Ω–∞ {abs(rain_effect):.1f}% –≤ –¥–æ–∂–¥–ª–∏–≤—ã–µ –¥–Ω–∏'
                }
        
        return {'significant': False, 'description': ''}
    except:
        return {'significant': False, 'description': ''}


def _analyze_holiday_impact_period(sub):
    """–ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥"""
    try:
        if 'is_holiday' not in sub.columns:
            return {'significant': False, 'description': ''}
        
        by_holiday = sub.groupby(sub['is_holiday'].fillna(0).astype(int))['total_sales'].mean().to_dict()
        
        if 0 in by_holiday and 1 in by_holiday:
            holiday_effect = (by_holiday[1] - by_holiday[0]) / by_holiday[0] * 100.0
            if abs(holiday_effect) > 15:  # –ó–Ω–∞—á–∏–º–æ–µ –≤–ª–∏—è–Ω–∏–µ >15%
                direction = "—Å–Ω–∏–∂–µ–Ω–∏–µ" if holiday_effect < 0 else "—É–≤–µ–ª–∏—á–µ–Ω–∏–µ"
                return {
                    'significant': True,
                    'description': f'{direction} –ø—Ä–æ–¥–∞–∂ –Ω–∞ {abs(holiday_effect):.1f}% –≤ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –¥–Ω–∏'
                }
        
        return {'significant': False, 'description': ''}
    except:
        return {'significant': False, 'description': ''}


def _analyze_critical_day_improved(critical_date, sub, daily, median_sales, restaurant_id, start_str, end_str, eng):
    """–ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–Ω—è –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    
    day_str = critical_date.strftime('%Y-%m-%d')
    day_sales = float(daily.loc[daily["date"] == critical_date, "total_sales"].iloc[0])
    loss_pct = ((day_sales - median_sales) / median_sales * 100) if median_sales else 0
    loss_amount = max(median_sales - day_sales, 0)
    
    lines = []
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏
    lines.append(f"üî¥ {day_str}")
    lines.append("")
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    grab_data, gojek_data = _get_day_operational_data(eng, restaurant_id, day_str)
    period_averages = _get_period_averages(eng, restaurant_id, start_str, end_str, day_str)
    
    # –ö–ª—é—á–µ–≤—ã–µ —Ü–∏—Ñ—Ä—ã
    total_orders = (grab_data.get('orders', 0) if grab_data else 0) + (gojek_data.get('orders', 0) if gojek_data else 0)
    avg_check = day_sales / total_orders if total_orders > 0 else 0
    normal_orders = period_averages.get('avg_orders', 34)
    normal_check = period_averages.get('avg_check', 400000)
    
    lines.append("### üìä **–ö–õ–Æ–ß–ï–í–´–ï –¶–ò–§–†–´**")
    lines.append(f"- **–ü—Ä–æ–¥–∞–∂–∏:** {_format_currency(day_sales)} (–º–µ–¥–∏–∞–Ω–∞: {_format_currency(median_sales)}) ‚Üí **{loss_pct:+.1f}%**")
    lines.append(f"- **–ü–æ—Ç–µ—Ä–∏:** {_format_currency(loss_amount)}")
    lines.append(f"- **–ó–∞–∫–∞–∑—ã:** {total_orders} —à—Ç (–Ω–æ—Ä–º–∞: {normal_orders:.0f}) ‚Üí **{((total_orders - normal_orders)/normal_orders*100):+.1f}%**")
    lines.append(f"- **–°—Ä–µ–¥–Ω–∏–π —á–µ–∫:** {_format_currency(avg_check)} (–Ω–æ—Ä–º–∞: {_format_currency(normal_check)}) ‚Üí **{((avg_check - normal_check)/normal_check*100):+.1f}%**")
    lines.append("")
    
    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω
    lines.append("### üîç **–†–ï–ê–õ–¨–ù–´–ï –ü–†–ò–ß–ò–ù–´**")
    lines.append("")
    
    root_causes = _identify_root_causes_improved(critical_date, sub, grab_data, gojek_data, period_averages, day_str)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã
    if root_causes['primary']:
        for i, cause in enumerate(root_causes['primary'][:3], 1):
            priority_icon = "üî¥" if i <= 2 else "üü°"
            lines.append(f"**{i}. {priority_icon} {cause['title']}**")
            lines.append(f"- {cause['description']}")
            lines.append(f"- **–í–ª–∏—è–Ω–∏–µ:** {cause['impact']}")
            lines.append("")
    
    # –í–Ω–µ—à–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã
    lines.append("### üåç **–í–ù–ï–®–ù–ò–ï –§–ê–ö–¢–û–†–´**")
    lines.append("")
    
    holiday_info = _get_holiday_info(critical_date, sub)
    weather_info = _get_weather_info(critical_date, sub)
    
    lines.append(f"**üïå –ü—Ä–∞–∑–¥–Ω–∏–∫–∏:** {holiday_info['description']}")
    lines.append(f"**üåßÔ∏è –ü–æ–≥–æ–¥–∞:** {weather_info['description']}")
    lines.append("")
    
    # –ß—Ç–æ –ø–æ–º–æ–≥–ª–æ
    if root_causes['positive']:
        lines.append("### ‚úÖ **–ß–¢–û –ü–û–ú–û–ì–õ–û –ò–ó–ë–ï–ñ–ê–¢–¨ –ë–û–õ–¨–®–ò–• –ü–û–¢–ï–†–¨**")
        lines.append("")
        for factor in root_causes['positive'][:3]:
            lines.append(f"**üí™ {factor['title']}:**")
            lines.append(f"- {factor['description']}")
            lines.append("")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    lines.append("### üéØ **–ö–û–ù–ö–†–ï–¢–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò**")
    lines.append("")
    
    recommendations = _generate_day_recommendations_improved(root_causes, loss_amount, holiday_info)
    
    for i, rec in enumerate(recommendations[:3], 1):
        priority_icon = {"High": "üî¥", "Medium": "üü°", "Low": "üü¢"}[rec['priority']]
        lines.append(f"**{i}. {priority_icon} {rec['action']}**")
        lines.append(f"- **–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç:** {rec['potential_impact']}")
        lines.append("")
    
    # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∏—Ç–æ–≥
    total_potential = sum([float(rec['potential_value']) for rec in recommendations if 'potential_value' in rec])
    recovery_pct = (total_potential / loss_amount * 100) if loss_amount > 0 else 0
    
    lines.append("### üí∞ **–§–ò–ù–ê–ù–°–û–í–´–ô –ò–¢–û–ì**")
    lines.append(f"- **–û–±—â–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:** {_format_currency(total_potential)} ({recovery_pct:.0f}% –æ—Ç –ø–æ—Ç–µ—Ä—å)")
    
    return lines


def _get_day_operational_data(eng, restaurant_id, day_str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ –¥–µ–Ω—å"""
    try:
        # GRAB –¥–∞–Ω–Ω—ã–µ
        grab_query = """
            SELECT sales, orders, ads_spend, ads_sales, offline_rate, cancelled_orders, rating
            FROM grab_stats 
            WHERE restaurant_id = ? AND stat_date = ?
        """
        grab_df = pd.read_sql_query(grab_query, eng, params=(restaurant_id, day_str))
        grab_data = grab_df.iloc[0].to_dict() if not grab_df.empty else None
        
        # GOJEK –¥–∞–Ω–Ω—ã–µ
        gojek_query = """
            SELECT sales, orders, ads_spend, ads_sales, accepting_time, preparation_time, 
                   delivery_time, cancelled_orders, rating
            FROM gojek_stats 
            WHERE restaurant_id = ? AND stat_date = ?
        """
        gojek_df = pd.read_sql_query(gojek_query, eng, params=(restaurant_id, day_str))
        gojek_data = gojek_df.iloc[0].to_dict() if not gojek_df.empty else None
        
        return grab_data, gojek_data
    except:
        return None, None


def _get_period_averages(eng, restaurant_id, start_str, end_str, exclude_date):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∑–∞ –ø–µ—Ä–∏–æ–¥"""
    try:
        # –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∏—Å–∫–ª—é—á–∞—è –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π –¥–µ–Ω—å
        query = """
            SELECT 
                AVG(grab_sales + gojek_sales) as avg_sales,
                AVG(grab_orders + gojek_orders) as avg_orders,
                AVG(grab_ads + gojek_ads) as avg_ads_spend,
                AVG((grab_sales + gojek_sales) / (grab_orders + gojek_orders)) as avg_check
            FROM (
                SELECT 
                    stat_date,
                    COALESCE(SUM(CASE WHEN source = 'grab' THEN sales END), 0) as grab_sales,
                    COALESCE(SUM(CASE WHEN source = 'grab' THEN orders END), 0) as grab_orders,
                    COALESCE(SUM(CASE WHEN source = 'grab' THEN ads_spend END), 0) as grab_ads,
                    COALESCE(SUM(CASE WHEN source = 'gojek' THEN sales END), 0) as gojek_sales,
                    COALESCE(SUM(CASE WHEN source = 'gojek' THEN orders END), 0) as gojek_orders,
                    COALESCE(SUM(CASE WHEN source = 'gojek' THEN ads_spend END), 0) as gojek_ads
                FROM (
                    SELECT stat_date, sales, orders, ads_spend, 'grab' as source
                    FROM grab_stats 
                    WHERE restaurant_id = ? AND stat_date BETWEEN ? AND ? AND stat_date != ?
                    UNION ALL
                    SELECT stat_date, sales, orders, ads_spend, 'gojek' as source
                    FROM gojek_stats 
                    WHERE restaurant_id = ? AND stat_date BETWEEN ? AND ? AND stat_date != ?
                )
                GROUP BY stat_date
            )
        """
        
        df = pd.read_sql_query(query, eng, params=(
            restaurant_id, start_str, end_str, exclude_date,
            restaurant_id, start_str, end_str, exclude_date
        ))
        
        if not df.empty:
            return df.iloc[0].to_dict()
        else:
            return {'avg_sales': 13000000, 'avg_orders': 34, 'avg_ads_spend': 300000, 'avg_check': 400000}
    except:
        return {'avg_sales': 13000000, 'avg_orders': 34, 'avg_ads_spend': 300000, 'avg_check': 400000}


def _identify_root_causes_improved(critical_date, sub, grab_data, gojek_data, period_averages, day_str):
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏—á–∏–Ω –ø—Ä–æ–≤–∞–ª–∞ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤"""
    
    causes = {'primary': [], 'external': [], 'positive': []}
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞
    day_grab_spend = grab_data.get('ads_spend', 0) if grab_data else 0
    day_gojek_spend = gojek_data.get('ads_spend', 0) if gojek_data else 0
    total_day_spend = day_grab_spend + day_gojek_spend
    avg_spend = period_averages.get('avg_ads_spend', 300000)
    
    if total_day_spend < avg_spend * 0.7:  # –°–Ω–∏–∂–µ–Ω–∏–µ >30%
        spend_drop_pct = ((avg_spend - total_day_spend) / avg_spend * 100)
        causes['primary'].append({
            'title': '–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –£–†–ï–ó–ê–ù–ò–ï –†–ï–ö–õ–ê–ú–ù–û–ì–û –ë–Æ–î–ñ–ï–¢–ê',
            'description': f'–û–±—â–∏–π –±—é–¥–∂–µ—Ç {_format_currency(total_day_spend)} –ø—Ä–æ—Ç–∏–≤ –Ω–æ—Ä–º—ã {_format_currency(avg_spend)} (-{spend_drop_pct:.0f}%)',
            'impact': f'~{_format_currency((avg_spend - total_day_spend) * 15)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–æ—Ç–µ—Ä—å',
            'category': 'Marketing'
        })
    
    # –ê–Ω–∞–ª–∏–∑ —Å—Ä–µ–¥–Ω–µ–≥–æ —á–µ–∫–∞
    day_orders = (grab_data.get('orders', 0) if grab_data else 0) + (gojek_data.get('orders', 0) if gojek_data else 0)
    day_sales = (grab_data.get('sales', 0) if grab_data else 0) + (gojek_data.get('sales', 0) if gojek_data else 0)
    day_check = day_sales / day_orders if day_orders > 0 else 0
    avg_check = period_averages.get('avg_check', 400000)
    
    if day_check < avg_check * 0.8:  # –°–Ω–∏–∂–µ–Ω–∏–µ >20%
        check_drop = avg_check - day_check
        check_drop_pct = (check_drop / avg_check * 100)
        causes['primary'].append({
            'title': '–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ü–ê–î–ï–ù–ò–ï –°–†–ï–î–ù–ï–ì–û –ß–ï–ö–ê',
            'description': f'–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ {_format_currency(day_check)} –ø—Ä–æ—Ç–∏–≤ –Ω–æ—Ä–º—ã {_format_currency(avg_check)} (-{check_drop_pct:.0f}%)',
            'impact': f'{_format_currency(check_drop * day_orders)} –ø—Ä—è–º—ã—Ö –ø–æ—Ç–µ—Ä—å',
            'category': 'Operations'
        })
    
    # –ê–Ω–∞–ª–∏–∑ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
    if gojek_data and 'preparation_time' in gojek_data:
        prep_time = _parse_time_to_minutes(gojek_data['preparation_time'])
        if prep_time and prep_time > 25:  # –û—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–∞—è –∫—É—Ö–Ω—è
            causes['primary'].append({
                'title': '–ú–ï–î–õ–ï–ù–ù–ê–Ø –ö–£–•–ù–Ø',
                'description': f'–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è {prep_time:.1f} –º–∏–Ω—É—Ç (–∫—Ä–∏—Ç–∏—á–Ω–æ >25 –º–∏–Ω)',
                'impact': '–°–Ω–∏–∂–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –∏ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤',
                'category': 'Operations'
            })
    
    # –ê–Ω–∞–ª–∏–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º
    if grab_data and grab_data.get('offline_rate', 0) > 60:  # –ë–æ–ª—å—à–µ —á–∞—Å–∞ –æ—Ñ—Ñ–ª–∞–π–Ω
        offline_hours = grab_data['offline_rate'] / 60
        causes['primary'].append({
            'title': '–î–õ–ò–¢–ï–õ–¨–ù–´–ô –û–§–§–õ–ê–ô–ù GRAB',
            'description': f'–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –±—ã–ª–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ {offline_hours:.1f} —á–∞—Å–æ–≤',
            'impact': f'~{_format_currency(offline_hours * 200000)} –ø–æ—Ç–µ—Ä—å –æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏',
            'category': 'Technical'
        })
    
    # –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
    if grab_data and grab_data.get('ads_spend', 0) > 0:
        grab_roas = grab_data.get('ads_sales', 0) / grab_data['ads_spend']
        if grab_roas > 20:  # –í—ã—Å–æ–∫–∏–π ROAS
            causes['positive'].append({
                'title': '–í—ã—Å–æ–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–µ–∫–ª–∞–º—ã GRAB',
                'description': f'ROAS {grab_roas:.1f}x (–æ—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç)',
                'impact': '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ—Ç–¥–∞—á–∞ –æ—Ç –∫–∞–∂–¥–æ–≥–æ —Ä—É–±–ª—è —Ä–µ–∫–ª–∞–º—ã'
            })
    
    if gojek_data and gojek_data.get('ads_spend', 0) > 0:
        gojek_roas = gojek_data.get('ads_sales', 0) / gojek_data['ads_spend']
        if gojek_roas > 15:
            causes['positive'].append({
                'title': '–í—ã—Å–æ–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–µ–∫–ª–∞–º—ã GOJEK',
                'description': f'ROAS {gojek_roas:.1f}x (—Ö–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç)',
                'impact': '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞'
            })
    
    # –ö–∞—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–∏—Å–∞
    avg_rating = 0
    rating_count = 0
    if grab_data and grab_data.get('rating'):
        avg_rating += grab_data['rating']
        rating_count += 1
    if gojek_data and gojek_data.get('rating'):
        avg_rating += gojek_data['rating']
        rating_count += 1
    
    if rating_count > 0:
        avg_rating /= rating_count
        if avg_rating >= 4.7:
            causes['positive'].append({
                'title': '–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–∏—Å–∞',
                'description': f'–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ {avg_rating:.1f}/5.0',
                'impact': '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤'
            })
    
    return causes


def _get_holiday_info(critical_date, sub):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö"""
    try:
        day_data = sub[sub["date"].dt.normalize() == critical_date]
        if day_data.empty:
            return {'is_holiday': False, 'description': '–æ–±—ã—á–Ω—ã–π –¥–µ–Ω—å'}
        
        is_holiday = bool(day_data.iloc[0].get('is_holiday', 0))
        
        if is_holiday:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–∞–∑–¥–Ω–∏–∫–∞ –ø–æ –¥–∞—Ç–µ
            date_str = critical_date.strftime('%m-%d')
            
            # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –º—É—Å—É–ª—å–º–∞–Ω—Å–∫–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ 2025
            muslim_holidays = {
                '04-01': 'Eid al-Fitr (–æ–∫–æ–Ω—á–∞–Ω–∏–µ –†–∞–º–∞–¥–∞–Ω–∞)',
                '06-07': 'Eid al-Adha (–ö—É—Ä–±–∞–Ω-–±–∞–π—Ä–∞–º)',
            }
            
            # –ë–∞–ª–∏–π—Å–∫–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
            balinese_holidays = {
                '03-31': 'Nyepi (–î–µ–Ω—å —Ç–∏—à–∏–Ω—ã)',
                '05-29': 'Galungan',
                '06-08': 'Kuningan',
            }
            
            # –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
            international_holidays = {
                '01-01': '–ù–æ–≤—ã–π –≥–æ–¥',
                '12-25': '–†–æ–∂–¥–µ—Å—Ç–≤–æ',
                '08-17': '–î–µ–Ω—å –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ò–Ω–¥–æ–Ω–µ–∑–∏–∏',
            }
            
            holiday_name = (muslim_holidays.get(date_str) or 
                          balinese_holidays.get(date_str) or 
                          international_holidays.get(date_str) or 
                          '–ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π –¥–µ–Ω—å')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –ø—Ä–æ–¥–∞–∂–∏
            if date_str in muslim_holidays:
                effect = "–∫—Ä—É–ø–Ω–µ–π—à–∏–π –º—É—Å—É–ª—å–º–∞–Ω—Å–∫–∏–π –ø—Ä–∞–∑–¥–Ω–∏–∫ ‚Äî –∫—É—Ä—å–µ—Ä—ã –æ—Ç–¥—ã—Ö–∞—é—Ç, —Å–µ–º–µ–π–Ω—ã–µ –∑–∞—Å—Ç–æ–ª—å—è –¥–æ–º–∞"
            elif date_str in balinese_holidays:
                effect = "–±–∞–ª–∏–π—Å–∫–∏–π –ø—Ä–∞–∑–¥–Ω–∏–∫ ‚Äî —Å–Ω–∏–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ 20-30%"
            elif date_str == '01-01':
                effect = "–ù–æ–≤—ã–π –≥–æ–¥ ‚Äî –æ–±—ã—á–Ω–æ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ 15-25%"
            else:
                effect = "–ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π –¥–µ–Ω—å ‚Äî –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è"
            
            return {
                'is_holiday': True,
                'name': holiday_name,
                'description': f'{holiday_name} ‚Äî {effect}'
            }
        else:
            weekday = critical_date.strftime('%A')
            weekday_ru = {
                'Monday': '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 'Tuesday': '–≤—Ç–æ—Ä–Ω–∏–∫', 'Wednesday': '—Å—Ä–µ–¥–∞',
                'Thursday': '—á–µ—Ç–≤–µ—Ä–≥', 'Friday': '–ø—è—Ç–Ω–∏—Ü–∞', 'Saturday': '—Å—É–±–±–æ—Ç–∞', 'Sunday': '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
            }
            return {
                'is_holiday': False,
                'description': f'–æ–±—ã—á–Ω—ã–π {weekday_ru.get(weekday, weekday.lower())}, –Ω–µ –ø—Ä–∞–∑–¥–Ω–∏–∫'
            }
    except:
        return {'is_holiday': False, 'description': '–æ–±—ã—á–Ω—ã–π –¥–µ–Ω—å'}


def _get_weather_info(critical_date, sub):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ"""
    try:
        day_data = sub[sub["date"].dt.normalize() == critical_date]
        if day_data.empty:
            return {'description': '–¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã'}
        
        row = day_data.iloc[0]
        rain = float(row.get('rain', 0)) if pd.notna(row.get('rain')) else 0
        temp = float(row.get('temp', 0)) if pd.notna(row.get('temp')) else None
        
        weather_parts = []
        
        # –ê–Ω–∞–ª–∏–∑ –¥–æ–∂–¥—è
        if rain >= 25:
            weather_parts.append(f"—Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å {rain:.1f}–º–º (–∫—É—Ä—å–µ—Ä—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, -25% –∑–∞–∫–∞–∑–æ–≤)")
        elif rain >= 10:
            weather_parts.append(f"—É–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å {rain:.1f}–º–º (~-15% –∑–∞–∫–∞–∑–æ–≤)")
        elif rain > 0:
            weather_parts.append(f"–ª–µ–≥–∫–∏–π –¥–æ–∂–¥—å {rain:.1f}–º–º (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ)")
        else:
            weather_parts.append("–±–µ–∑ –¥–æ–∂–¥—è")
        
        # –ê–Ω–∞–ª–∏–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        if temp:
            if temp > 35:
                weather_parts.append(f"–æ—á–µ–Ω—å –∂–∞—Ä–∫–æ {temp:.1f}¬∞C (—Å–Ω–∏–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)")
            elif temp < 20:
                weather_parts.append(f"–ø—Ä–æ—Ö–ª–∞–¥–Ω–æ {temp:.1f}¬∞C (–±–æ–ª—å—à–µ –∑–∞–∫–∞–∑–æ–≤ –≥–æ—Ä—è—á–µ–π –µ–¥—ã)")
            else:
                weather_parts.append(f"–∫–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {temp:.1f}¬∞C")
        
        return {'description': ', '.join(weather_parts)}
    except:
        return {'description': '–æ–±—ã—á–Ω–∞—è –ø–æ–≥–æ–¥–∞'}


def _generate_day_recommendations_improved(root_causes, loss_amount, holiday_info):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è"""
    
    recommendations = []
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏—á–∏–Ω
    marketing_issues = len([c for c in root_causes['primary'] if c.get('category') == 'Marketing'])
    operational_issues = len([c for c in root_causes['primary'] if c.get('category') == 'Operations'])
    technical_issues = len([c for c in root_causes['primary'] if c.get('category') == 'Technical'])
    
    # –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if marketing_issues > 0:
        if holiday_info.get('is_holiday'):
            recommendations.append({
                'action': '–£–≤–µ–ª–∏—á–∏—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–π –±—é–¥–∂–µ—Ç –Ω–∞ 50-100% –≤ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏',
                'potential_impact': f'{_format_currency(min(loss_amount * 0.6, 3000000))}',
                'potential_value': min(loss_amount * 0.6, 3000000),
                'priority': 'High'
            })
            recommendations.append({
                'action': '–¢–∞—Ä–≥–µ—Ç–∏–Ω–≥ –Ω–∞ –Ω–µ–º—É—Å—É–ª—å–º–∞–Ω –∏ —Ç—É—Ä–∏—Å—Ç–æ–≤ –≤ —Ä–µ–ª–∏–≥–∏–æ–∑–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏',
                'potential_impact': f'{_format_currency(min(loss_amount * 0.3, 1500000))}',
                'potential_value': min(loss_amount * 0.3, 1500000),
                'priority': 'High'
            })
        else:
            recommendations.append({
                'action': '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–π –±—é–¥–∂–µ—Ç –¥–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è',
                'potential_impact': f'{_format_currency(min(loss_amount * 0.7, 4000000))}',
                'potential_value': min(loss_amount * 0.7, 4000000),
                'priority': 'High'
            })
    
    # –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if operational_issues > 0:
        recommendations.append({
            'action': '–ó–∞–ø—É—Å—Ç–∏—Ç—å upsell —Å—Ç—Ä–∞—Ç–µ–≥–∏—é: –ø—Ä–æ–º–æ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ >400K IDR',
            'potential_impact': f'{_format_currency(min(loss_amount * 0.4, 2000000))}',
            'potential_value': min(loss_amount * 0.4, 2000000),
            'priority': 'High'
        })
        recommendations.append({
            'action': '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã –∫—É—Ö–Ω–∏: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª –≤ –ø–∏–∫',
            'potential_impact': f'{_format_currency(min(loss_amount * 0.2, 1000000))}',
            'potential_value': min(loss_amount * 0.2, 1000000),
            'priority': 'Medium'
        })
    
    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if technical_issues > 0:
        recommendations.append({
            'action': '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º + —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã',
            'potential_impact': f'{_format_currency(min(loss_amount * 0.8, 5000000))}',
            'potential_value': min(loss_amount * 0.8, 5000000),
            'priority': 'High'
        })
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
    if not recommendations:
        recommendations.append({
            'action': '–ü—Ä–æ–≤–µ—Å—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–ø–µ—Ä–∞—Ü–∏–π –≤ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ –¥–Ω–∏',
            'potential_impact': '—Ç—Ä–µ–±—É–µ—Ç –∞–Ω–∞–ª–∏–∑–∞',
            'potential_value': 0,
            'priority': 'Low'
        })
    
    return sorted(recommendations, key=lambda x: {'High': 3, 'Medium': 2, 'Low': 1}[x['priority']], reverse=True)


def _generate_period_summary_improved(critical_dates, sub, restaurant_id):
    """–û–±—â–∏–µ –≤—ã–≤–æ–¥—ã –ø–æ –≤—Å–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º –¥–Ω—è–º"""
    
    lines = []
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã
    weather_days = len([d for d in critical_dates if _was_rainy_day_improved(d, sub)])
    holiday_days = len([d for d in critical_dates if _was_holiday_improved(d, sub)])
    
    lines.append(f"üìä –í—Å–µ–≥–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–Ω–µ–π: {len(critical_dates)}")
    
    if weather_days > 0:
        lines.append(f"üåßÔ∏è –î–æ–∂–¥–ª–∏–≤—ã—Ö –¥–Ω–µ–π: {weather_days} ({weather_days/len(critical_dates)*100:.0f}%)")
    
    if holiday_days > 0:
        lines.append(f"üéå –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã—Ö –¥–Ω–µ–π: {holiday_days} ({holiday_days/len(critical_dates)*100:.0f}%)")
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
    lines.append("")
    lines.append("üéØ –ü–†–ò–û–†–ò–¢–ï–¢–ù–ê–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:")
    
    if holiday_days >= len(critical_dates) * 0.5:
        lines.append("   –†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Ä–∞–±–æ—Ç—ã –≤ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –¥–Ω–∏")
    elif weather_days >= len(critical_dates) * 0.5:
        lines.append("   –†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Ä–∞–±–æ—Ç—ã –≤ –ø–ª–æ—Ö—É—é –ø–æ–≥–æ–¥—É")
    else:
        lines.append("   –£—Å–∏–ª–∏—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞ –∏ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
    
    return lines


def _was_rainy_day_improved(date, sub):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ–∂–¥–ª–∏–≤—ã–π –¥–µ–Ω—å"""
    try:
        day_data = sub[sub["date"].dt.normalize() == date]
        if day_data.empty:
            return False
        rain = float(day_data.iloc[0].get('rain', 0)) if pd.notna(day_data.iloc[0].get('rain')) else 0
        return rain >= 10
    except:
        return False


def _was_holiday_improved(date, sub):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫"""
    try:
        day_data = sub[sub["date"].dt.normalize() == date]
        if day_data.empty:
            return False
        return bool(day_data.iloc[0].get('is_holiday', 0))
    except:
        return False


def _format_currency(amount):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã"""
    if amount >= 1000000:
        return f"{amount/1000000:.1f}M IDR"
    elif amount >= 1000:
        return f"{amount/1000:.0f}K IDR"
    else:
        return f"{amount:.0f} IDR"


def _parse_time_to_minutes(time_str):
    """–ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–∏–Ω—É—Ç—ã"""
    if not time_str:
        return None
    try:
        if isinstance(time_str, str) and ':' in time_str:
            parts = time_str.split(':')
            return int(parts[0]) * 60 + int(parts[1])
        return float(time_str)
    except:
        return None