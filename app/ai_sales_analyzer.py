"""
AI Sales Analyzer - –£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–∞–¥–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂
–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–º —è–∑—ã–∫–æ–º
"""

import re
import pandas as pd
from datetime import datetime, timedelta
from typing import Dict, List, Tuple, Optional
import os

from app.data_adapter import get_data_adapter
from ml.inference import load_artifacts
import shap
import numpy as np


class SalesAnalyzer:
    """–£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ–¥–∞–∂ —Å ML –∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º —è–∑—ã–∫–æ–º"""
    
    def __init__(self):
        self.adapter = get_data_adapter()
        self.restaurants = self._load_restaurants()
        
    def _load_restaurants(self) -> Dict[str, int]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
        try:
            restaurants_list = self.adapter.get_restaurants_list()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
            if not restaurants_list:
                return {}
            
            # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
            if isinstance(restaurants_list[0], dict):
                return {r['name'].lower(): r['id'] for r in restaurants_list}
            
            # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (id, name)
            elif isinstance(restaurants_list[0], (tuple, list)):
                return {r[1].lower(): r[0] for r in restaurants_list}
            
            # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∏ (—Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏—è)
            elif isinstance(restaurants_list[0], str):
                return {r.lower(): i for i, r in enumerate(restaurants_list, 1)}
            
            return {}
            
        except Exception as e:
            # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
            return {
                'only eggs': 20,
                'ika canggu': 11,
                'huge': 1,
                'soul kitchen': 6,
                'ika ubud': 7,
                'signa': 9,
                'prana': 12,
                'the room': 15
            }
    
    def parse_question(self, question: str) -> Dict[str, any]:
        """–ü–∞—Ä—Å–∏—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω, –ø–µ—Ä–∏–æ–¥, —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞"""
        result = {
            'restaurant_name': None,
            'restaurant_id': None,
            'period': None,
            'analysis_type': 'sales_drop',
            'timeframe': 'specific'  # specific, recent, trend
        }
        
        question_lower = question.lower()
        
        # –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
        for name, restaurant_id in self.restaurants.items():
            if name in question_lower:
                result['restaurant_name'] = name
                result['restaurant_id'] = restaurant_id
                break
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥
        if '–ø–æ—Å–ª–µ–¥–Ω–∏–µ' in question_lower or '–ø–æ—Å–ª–µ–¥–Ω–∏–π' in question_lower:
            result['timeframe'] = 'recent'
            
            # –ò—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤
            months_match = re.search(r'(\d+)\s*–º–µ—Å—è—Ü', question_lower)
            if months_match:
                months = int(months_match.group(1))
                end_date = datetime.now().date()
                start_date = end_date.replace(day=1) - timedelta(days=30*months)
                result['period'] = f"{start_date.strftime('%Y-%m-%d')}_{end_date.strftime('%Y-%m-%d')}"
            else:
                # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞
                end_date = datetime.now().date()
                start_date = end_date - timedelta(days=90)
                result['period'] = f"{start_date.strftime('%Y-%m-%d')}_{end_date.strftime('%Y-%m-%d')}"
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –ø–µ—Ä–∏–æ–¥–æ–≤
        month_mapping = {
            '—è–Ω–≤': '01', '—è–Ω–≤–∞—Ä': '01',
            '—Ñ–µ–≤': '02', '—Ñ–µ–≤—Ä–∞–ª': '02', 
            '–º–∞—Ä': '03', '–º–∞—Ä—Ç': '03',
            '–∞–ø—Ä': '04', '–∞–ø—Ä–µ–ª': '04',
            '–º–∞–π': '05', '–º–∞—è': '05', '–º–∞–µ': '05',
            '–∏—é–Ω': '06', '–∏—é–Ω—è': '06', '–∏—é–Ω–µ': '06',
            '–∏—é–ª': '07', '–∏—é–ª—è': '07', '–∏—é–ª–µ': '07',
            '–∞–≤–≥': '08', '–∞–≤–≥—É—Å—Ç': '08',
            '—Å–µ–Ω': '09', '—Å–µ–Ω—Ç—è–±—Ä': '09',
            '–æ–∫—Ç': '10', '–æ–∫—Ç—è–±—Ä': '10',
            '–Ω–æ—è': '11', '–Ω–æ—è–±—Ä': '11',
            '–¥–µ–∫': '12', '–¥–µ–∫–∞–±—Ä': '12'
        }
        
        # –ò—â–µ–º –≥–æ–¥
        year_match = re.search(r'(202[3-9])', question_lower)
        year = year_match.group(1) if year_match else '2025'
        
        # –ò—â–µ–º –º–µ—Å—è—Ü
        for month_name, month_num in month_mapping.items():
            if month_name in question_lower:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ
                days_in_month = {
                    '01': 31, '02': 28, '03': 31, '04': 30, '05': 31, '06': 30,
                    '07': 31, '08': 31, '09': 30, '10': 31, '11': 30, '12': 31
                }
                last_day = days_in_month.get(month_num, 30)
                result['period'] = f'{year}-{month_num}-01_{year}-{month_num}-{last_day:02d}'
                break
        
        # –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        date_match = re.search(r'(\d{4}-\d{2}-\d{2})', question_lower)
        if date_match and not result['period']:
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É, –¥–µ–ª–∞–µ–º –ø–µ—Ä–∏–æ–¥ –Ω–∞ –≤–µ—Å—å –º–µ—Å—è—Ü —ç—Ç–æ–π –¥–∞—Ç—ã
            date_str = date_match.group(1)
            year, month, day = date_str.split('-')
            days_in_month = {
                '01': 31, '02': 28, '03': 31, '04': 30, '05': 31, '06': 30,
                '07': 31, '08': 31, '09': 30, '10': 31, '11': 30, '12': 31
            }
            last_day = days_in_month.get(month, 30)
            result['period'] = f'{year}-{month}-01_{year}-{month}-{last_day:02d}'
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞
        if any(word in question_lower for word in ['–ø–∞–¥–∞—é—Ç', '—É–ø–∞–ª–∏', '—Å–Ω–∏–∂–µ–Ω–∏–µ', '–ø–∞–¥–µ–Ω–∏–µ']):
            result['analysis_type'] = 'sales_drop'
        elif any(word in question_lower for word in ['—Ä–∞—Å—Ç—É—Ç', '–≤—ã—Ä–æ—Å–ª–∏', '—É–≤–µ–ª–∏—á–µ–Ω–∏–µ', '—Ä–æ—Å—Ç']):
            result['analysis_type'] = 'sales_growth'
        elif any(word in question_lower for word in ['—Ç—Ä–µ–Ω–¥', '–¥–∏–Ω–∞–º–∏–∫–∞', '–∏–∑–º–µ–Ω–µ–Ω–∏–µ']):
            result['analysis_type'] = 'trend_analysis'
        
        return result
    
    def analyze_sales_drop(self, restaurant_id: int, period: str, restaurant_name: str) -> str:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–∏—á–∏–Ω—ã –ø–∞–¥–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂ —Å ML –∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º —è–∑—ã–∫–æ–º"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ data_adapter
            start_str, end_str = period.split('_')
            kpi_data = self.adapter.get_kpi_data(start_str, end_str)
            if not kpi_data:
                return f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É {restaurant_name} –∑–∞ –ø–µ—Ä–∏–æ–¥ {period}"
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º ML –º–æ–¥–µ–ª—å
            model, features, background = load_artifacts()
            if not model or not features:
                return "‚ö†Ô∏è ML –º–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏—á–∏–Ω."
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
            from etl.data_loader import get_engine
            engine = get_engine()
            
            start_str, end_str = period.split('_')
            
            query = f"""
            SELECT date, total_sales, orders_count, ads_spend, ads_sales, 
                   cancelled_orders, rating, is_holiday, rain, temp
            FROM merged_dataset_view 
            WHERE restaurant_id = {restaurant_id} 
            AND date BETWEEN '{start_str}' AND '{end_str}'
            ORDER BY date
            """
            
            try:
                df = pd.read_sql(query, engine, parse_dates=["date"])
            except:
                # Fallback –Ω–∞ –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                return self._basic_sales_analysis(restaurant_name, period, kpi_data)
            
            if df.empty:
                return f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É {restaurant_name} –∑–∞ {period}"
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥ –ø—Ä–æ–¥–∞–∂
            median_sales = df['total_sales'].median()
            avg_sales = df['total_sales'].mean()
            min_sales = df['total_sales'].min()
            max_sales = df['total_sales'].max()
            
            # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –¥–Ω–∏
            threshold = median_sales * 0.7  # 30% –ø–∞–¥–µ–Ω–∏–µ
            bad_days = df[df['total_sales'] <= threshold]
            
            response = []
            response.append(f"üîç **–ê–ù–ê–õ–ò–ó –ü–ê–î–ï–ù–ò–Ø –ü–†–û–î–ê–ñ: {restaurant_name.upper()}**")
            response.append("=" * 60)
            response.append("")
            
            # –û–±—â–∞—è –∫–∞—Ä—Ç–∏–Ω–∞
            response.append("üìä **–û–ë–©–ê–Ø –ö–ê–†–¢–ò–ù–ê:**")
            response.append(f"‚Ä¢ –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: {start_str} ‚Äî {end_str}")
            response.append(f"‚Ä¢ –ú–µ–¥–∏–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏: {self._format_idr(median_sales)}")
            response.append(f"‚Ä¢ –†–∞–∑–±—Ä–æ—Å: –æ—Ç {self._format_idr(min_sales)} –¥–æ {self._format_idr(max_sales)}")
            response.append(f"‚Ä¢ –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –¥–Ω–µ–π: {len(bad_days)} –∏–∑ {len(df)} ({len(bad_days)/len(df)*100:.1f}%)")
            response.append("")
            
            if len(bad_days) == 0:
                response.append("‚úÖ **–•–û–†–û–®–ò–ï –ù–û–í–û–°–¢–ò:** –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞–¥–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!")
                response.append("üìà –ü—Ä–æ–¥–∞–∂–∏ —Å—Ç–∞–±–∏–ª—å–Ω—ã –∏ –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏")
                return "\\n".join(response)
            
            # ML –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω
            try:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∞–º—ã–π —Ö—É–¥—à–∏–π –¥–µ–Ω—å
                worst_day = bad_days.loc[bad_days['total_sales'].idxmin()]
                worst_date = worst_day['date'].strftime('%Y-%m-%d')
                worst_sales = worst_day['total_sales']
                loss = median_sales - worst_sales
                
                response.append(f"üî¥ **–°–ê–ú–´–ô –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –î–ï–ù–¨: {worst_date}**")
                response.append(f"‚Ä¢ –ü—Ä–æ–¥–∞–∂–∏: {self._format_idr(worst_sales)} (–º–µ–¥–∏–∞–Ω–∞: {self._format_idr(median_sales)})")
                response.append(f"‚Ä¢ –ü–æ—Ç–µ—Ä–∏: {self._format_idr(loss)} ({((worst_sales - median_sales) / median_sales * 100):+.1f}%)")
                response.append("")
                
                # SHAP –∞–Ω–∞–ª–∏–∑ –¥–ª—è —Ö—É–¥—à–µ–≥–æ –¥–Ω—è
                day_features = worst_day[features] if all(f in worst_day.index for f in features) else None
                
                if day_features is not None:
                    X_day = day_features.values.reshape(1, -1)
                    pre = model.named_steps["pre"]
                    mdl = model.named_steps["model"]
                    X_pre = pre.transform(X_day)
                    
                    if background is not None and not background.empty:
                        bg_pre = pre.transform(background[features])
                        explainer = shap.TreeExplainer(mdl, data=bg_pre)
                    else:
                        explainer = shap.TreeExplainer(mdl)
                    
                    shap_values = explainer.shap_values(X_pre)[0]
                    
                    # –ü–µ—Ä–µ–≤–æ–¥–∏–º SHAP –≤ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π —è–∑—ã–∫
                    causes = self._shap_to_business_language(features, shap_values, worst_day, loss)
                    
                    response.append("üîç **–ì–õ–ê–í–ù–´–ï –ü–†–ò–ß–ò–ù–´ –ü–ê–î–ï–ù–ò–Ø:**")
                    for i, cause in enumerate(causes[:3], 1):
                        response.append(f"{i}. {cause}")
                    response.append("")
                
            except Exception as e:
                response.append("‚ö†Ô∏è **ML –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω**, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑")
                response.append("")
            
            # –ê–Ω–∞–ª–∏–∑ –æ–±—â–∏—Ö —Ç—Ä–µ–Ω–¥–æ–≤
            response.append("üìà **–û–ë–©–ò–ï –¢–†–ï–ù–î–´ –ó–ê –ü–ï–†–ò–û–î:**")
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∏ –≤—Ç–æ—Ä—É—é –ø–æ–ª–æ–≤–∏–Ω—É –ø–µ—Ä–∏–æ–¥–∞
            mid_point = len(df) // 2
            first_half = df.iloc[:mid_point]['total_sales'].mean()
            second_half = df.iloc[mid_point:]['total_sales'].mean()
            trend_change = ((second_half - first_half) / first_half * 100) if first_half > 0 else 0
            
            if trend_change < -10:
                response.append(f"üìâ **–ü—Ä–æ–¥–∞–∂–∏ –ø–∞–¥–∞—é—Ç:** -{abs(trend_change):.1f}% –≤–æ –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ –ø–µ—Ä–∏–æ–¥–∞")
            elif trend_change > 10:
                response.append(f"üìà **–ü—Ä–æ–¥–∞–∂–∏ —Ä–∞—Å—Ç—É—Ç:** +{trend_change:.1f}% –≤–æ –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ –ø–µ—Ä–∏–æ–¥–∞")
            else:
                response.append(f"üìä **–ü—Ä–æ–¥–∞–∂–∏ —Å—Ç–∞–±–∏–ª—å–Ω—ã:** –∏–∑–º–µ–Ω–µ–Ω–∏–µ {trend_change:+.1f}%")
            
            # –ü—Ä–∞–∑–¥–Ω–∏—á–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ
            holiday_days = df[df['is_holiday'] == 1]
            if len(holiday_days) > 0:
                holiday_avg = holiday_days['total_sales'].mean()
                normal_avg = df[df['is_holiday'] == 0]['total_sales'].mean()
                holiday_effect = ((holiday_avg - normal_avg) / normal_avg * 100) if normal_avg > 0 else 0
                
                if holiday_effect < -15:
                    response.append(f"üïå **–ü—Ä–∞–∑–¥–Ω–∏–∫–∏ —Å–∏–ª—å–Ω–æ –≤–ª–∏—è—é—Ç:** -{abs(holiday_effect):.1f}% –≤ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –¥–Ω–∏")
                elif holiday_effect > 15:
                    response.append(f"üïå **–ü—Ä–∞–∑–¥–Ω–∏–∫–∏ –ø–æ–º–æ–≥–∞—é—Ç:** +{holiday_effect:.1f}% –≤ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –¥–Ω–∏")
            
            # –ü–æ–≥–æ–¥–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ
            rainy_days = df[df['rain'] >= 5.0]
            if len(rainy_days) > 0:
                rainy_avg = rainy_days['total_sales'].mean()
                dry_avg = df[df['rain'] < 5.0]['total_sales'].mean()
                rain_effect = ((rainy_avg - dry_avg) / dry_avg * 100) if dry_avg > 0 else 0
                
                if rain_effect < -10:
                    response.append(f"üåßÔ∏è **–î–æ–∂–¥—å —Å–Ω–∏–∂–∞–µ—Ç –ø—Ä–æ–¥–∞–∂–∏:** -{abs(rain_effect):.1f}% –≤ –¥–æ–∂–¥–ª–∏–≤—ã–µ –¥–Ω–∏")
            
            response.append("")
            
            # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            response.append("üéØ **–ö–û–ù–ö–†–ï–¢–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:**")
            response.append("1. üî¥ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Ö—É–¥—à–∏–µ –¥–Ω–∏")
            response.append("2. üü° –†–∞–∑—Ä–∞–±–æ—Ç–∞–π—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã—Ö –¥–Ω–µ–π")
            response.append("3. üü° –í–Ω–µ–¥—Ä–∏—Ç–µ –ø–æ–≥–æ–¥–Ω—ã–µ –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–∏")
            response.append("4. üü¢ –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ (–≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏, —Ä–µ–π—Ç–∏–Ω–≥)")
            
            return "\\n".join(response)
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"
    
    def _shap_to_business_language(self, features: List[str], shap_values: np.ndarray, 
                                 day_data: pd.Series, total_loss: float) -> List[str]:
        """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç SHAP –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø–æ–Ω—è—Ç–Ω—ã–π –±–∏–∑–Ω–µ—Å-—è–∑—ã–∫"""
        causes = []
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–º—É –≤–ª–∏—è–Ω–∏—é
        negative_factors = []
        for feature, shap_val in zip(features, shap_values):
            if shap_val < 0:  # –ù–µ–≥–∞—Ç–∏–≤–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ
                contribution = abs(shap_val)
                percentage = (contribution / total_loss * 100) if total_loss > 0 else 0
                negative_factors.append((feature, contribution, percentage))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–∫–ª–∞–¥—É
        negative_factors.sort(key=lambda x: x[1], reverse=True)
        
        for feature, contribution, percentage in negative_factors[:5]:
            cause = self._translate_feature_to_business(feature, day_data, contribution, percentage)
            if cause:
                causes.append(cause)
        
        return causes
    
    def _translate_feature_to_business(self, feature: str, day_data: pd.Series, 
                                     contribution: float, percentage: float) -> Optional[str]:
        """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç ML —Ñ–∏—á—É –≤ –±–∏–∑–Ω–µ—Å-–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ"""
        
        # –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        if 'ads_spend' in feature.lower():
            platform = "GRAB" if 'grab' in feature.lower() else ("GOJEK" if 'gojek' in feature.lower() else "")
            if platform:
                return f"üî¥ **{platform}: —É—Ä–µ–∑–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞** ‚Äî –ø–æ—Ç–µ—Ä–∏ {self._format_idr(contribution)} ({percentage:.1f}%)"
            else:
                return f"üî¥ **–°–Ω–∏–∂–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞** ‚Äî –ø–æ—Ç–µ—Ä–∏ {self._format_idr(contribution)} ({percentage:.1f}%)"
        
        if 'roas' in feature.lower():
            platform = "GRAB" if 'grab' in feature.lower() else ("GOJEK" if 'gojek' in feature.lower() else "")
            return f"üî¥ **{platform}: –Ω–∏–∑–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–µ–∫–ª–∞–º—ã** ‚Äî –ø–æ—Ç–µ—Ä–∏ {self._format_idr(contribution)} ({percentage:.1f}%)"
        
        # –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        if 'prep' in feature.lower() or 'preparation' in feature.lower():
            return f"üü° **–ú–µ–¥–ª–µ–Ω–Ω–∞—è –∫—É—Ö–Ω—è** ‚Äî –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –ø–æ–≤–ª–∏—è–ª–æ –Ω–∞ {self._format_idr(contribution)} ({percentage:.1f}%)"
        
        if 'delivery' in feature.lower():
            return f"üü° **–ú–µ–¥–ª–µ–Ω–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞** ‚Äî –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–Ω–∏–∑–∏–ª–æ –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ {self._format_idr(contribution)} ({percentage:.1f}%)"
        
        if 'rating' in feature.lower():
            return f"üü° **–ü–∞–¥–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞** ‚Äî –∫–∞—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–≤–ª–∏—è–ª–æ –Ω–∞ {self._format_idr(contribution)} ({percentage:.1f}%)"
        
        if 'cancel' in feature.lower():
            return f"üî¥ **–†–æ—Å—Ç –æ—Ç–º–µ–Ω –∑–∞–∫–∞–∑–æ–≤** ‚Äî –ø–æ—Ç–µ—Ä–∏ {self._format_idr(contribution)} ({percentage:.1f}%)"
        
        # –í–Ω–µ—à–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        if 'holiday' in feature.lower():
            return f"üïå **–ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π –¥–µ–Ω—å** ‚Äî —Å–Ω–∏–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ {self._format_idr(contribution)} ({percentage:.1f}%)"
        
        if 'rain' in feature.lower():
            rain_mm = day_data.get('rain', 0) or 0
            if rain_mm >= 10:
                return f"üåßÔ∏è **–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å ({rain_mm:.1f}–º–º)** ‚Äî –∫—É—Ä—å–µ—Ä—ã –Ω–µ —Ä–∞–±–æ—Ç–∞–ª–∏, –ø–æ—Ç–µ—Ä–∏ {self._format_idr(contribution)} ({percentage:.1f}%)"
            elif rain_mm >= 2:
                return f"üåßÔ∏è **–î–æ–∂–¥—å ({rain_mm:.1f}–º–º)** ‚Äî —Å–Ω–∏–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ {self._format_idr(contribution)} ({percentage:.1f}%)"
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        if percentage < 5:
            return None
        
        return f"üü¢ **{feature}** ‚Äî –≤–ª–∏—è–Ω–∏–µ {self._format_idr(contribution)} ({percentage:.1f}%)"
    
    def _basic_sales_analysis(self, restaurant_name: str, period: str, kpi_data: Dict) -> str:
        """–ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑ ML –∫–æ–≥–¥–∞ –Ω–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        response = []
        response.append(f"üìä **–ë–ê–ó–û–í–´–ô –ê–ù–ê–õ–ò–ó: {restaurant_name.upper()}**")
        response.append("=" * 50)
        response.append("")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ KPI
        if "total_sales" in kpi_data:
            response.append(f"üí∞ –û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {self._format_idr(kpi_data['total_sales'])}")
        
        if "total_orders" in kpi_data:
            response.append(f"üì¶ –û–±—â–∏–µ –∑–∞–∫–∞–∑—ã: {kpi_data['total_orders']}")
            
            if "total_sales" in kpi_data and kpi_data['total_orders'] > 0:
                avg_check = kpi_data['total_sales'] / kpi_data['total_orders']
                response.append(f"üíµ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {self._format_idr(avg_check)}")
        
        response.append("")
        response.append("‚ö†Ô∏è **–î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏—á–∏–Ω –ø–∞–¥–µ–Ω–∏—è:**")
        response.append("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ ETL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        response.append("2. –û–±—É—á–∏—Ç–µ ML –º–æ–¥–µ–ª—å")
        response.append("3. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è SHAP –∞–Ω–∞–ª–∏–∑–∞")
        
        return "\\n".join(response)
    
    def _format_idr(self, amount: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—É–º–º—É –≤ IDR"""
        try:
            if amount >= 1_000_000:
                return f"{amount/1_000_000:.1f}M IDR"
            elif amount >= 1_000:
                return f"{amount/1_000:.0f}K IDR"
            else:
                return f"{amount:.0f} IDR"
        except:
            return str(amount)
    
    def answer_question(self, question: str) -> str:
        """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not question.strip():
            return "‚ùì –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–æ–¥–∞–∂–∞—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞"
        
        # –ü–∞—Ä—Å–∏–º –≤–æ–ø—Ä–æ—Å
        parsed = self.parse_question(question)
        
        if not parsed['restaurant_name']:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã
            restaurant_names = list(self.restaurants.keys())[:10]
            return f"""‚ùì **–ù–µ —É–∫–∞–∑–∞–Ω —Ä–µ—Å—Ç–æ—Ä–∞–Ω**
            
–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã: {', '.join(restaurant_names)}...

**–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:**
‚Ä¢ "–ü–æ—á–µ–º—É —É–ø–∞–ª–∏ –ø—Ä–æ–¥–∞–∂–∏ –≤ Only Eggs –≤ –º–∞–µ 2025?"
‚Ä¢ "–ü–æ—á–µ–º—É –ø–∞–¥–∞—é—Ç –ø—Ä–æ–¥–∞–∂–∏ –≤ Ika Canggu –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –º–µ—Å—è—Ü–∞?"
‚Ä¢ "–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏ –≤ Huge –≤ –∏—é–ª–µ?"
"""
        
        if not parsed['period']:
            return f"""‚ùì **–ù–µ —É–∫–∞–∑–∞–Ω –ø–µ—Ä–∏–æ–¥**

**–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:**
‚Ä¢ "–ü–æ—á–µ–º—É —É–ø–∞–ª–∏ –ø—Ä–æ–¥–∞–∂–∏ –≤ {parsed['restaurant_name']} –≤ –º–∞–µ 2025?"
‚Ä¢ "–ü–æ—á–µ–º—É –ø–∞–¥–∞—é—Ç –ø—Ä–æ–¥–∞–∂–∏ –≤ {parsed['restaurant_name']} –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞?"
‚Ä¢ "–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å {parsed['restaurant_name']} –≤ –∏—é–ª–µ 2025?"
"""
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
        if parsed['analysis_type'] == 'sales_drop':
            return self.analyze_sales_drop(
                parsed['restaurant_id'], 
                parsed['period'], 
                parsed['restaurant_name']
            )
        else:
            return f"üîÑ –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ '{parsed['analysis_type']}' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
_analyzer = None

def get_sales_analyzer():
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
    global _analyzer
    if _analyzer is None:
        _analyzer = SalesAnalyzer()
    return _analyzer


def analyze_sales_question(question: str) -> str:
    """–ü—É–±–ª–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö"""
    analyzer = get_sales_analyzer()
    return analyzer.answer_question(question)