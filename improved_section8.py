"""–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª 8 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–Ω–µ–π"""

import pandas as pd
from etl.data_loader import get_engine


def section8_critical_days_improved(period: str, restaurant_id: int) -> str:
    """–ù–æ–≤—ã–π —É–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–Ω–µ–π"""
    
    try:
        start_str, end_str = period.split("_")
        eng = get_engine()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–µ—Ä–∏–æ–¥
        query = """
            SELECT stat_date, 
                   SUM(sales) as total_sales,
                   SUM(orders) as total_orders,
                   SUM(ads_spend) as total_ads_spend
            FROM (
                SELECT stat_date, sales, orders, ads_spend FROM grab_stats WHERE restaurant_id = ?
                UNION ALL
                SELECT stat_date, sales, orders, ads_spend FROM gojek_stats WHERE restaurant_id = ?
            )
            WHERE stat_date BETWEEN ? AND ?
            GROUP BY stat_date
            ORDER BY total_sales ASC
        """
        
        df = pd.read_sql_query(query, eng, params=(restaurant_id, restaurant_id, start_str, end_str))
        
        if df.empty:
            return "8. üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –î–ù–ò\n" + ("‚ïê" * 80) + "\nüìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."
        
        # –ù–∞—Ö–æ–¥–∏–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–Ω–∏ (–ø–∞–¥–µ–Ω–∏–µ ‚â•25% –æ—Ç –º–µ–¥–∏–∞–Ω—ã)
        median_sales = df['total_sales'].median()
        threshold = median_sales * 0.75
        critical_days = df[df['total_sales'] <= threshold]
        
        lines = []
        lines.append("8. üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –î–ù–ò")
        lines.append("‚ïê" * 80)
        
        if critical_days.empty:
            lines.append("‚úÖ –í –ø–µ—Ä–∏–æ–¥–µ –Ω–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–∞–ª–æ–≤ –ø—Ä–æ–¥–∞–∂ (–ø–∞–¥–µ–Ω–∏–µ >25% –æ—Ç –º–µ–¥–∏–∞–Ω—ã)")
            lines.append(f"üìä –ú–µ–¥–∏–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏: {median_sales:,.0f} IDR")
            return "\n".join(lines)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–Ω—å (–º–∞–∫—Å–∏–º—É–º 5)
        for _, day in critical_days.head(5).iterrows():
            lines.append("")
            lines.append(f"üî¥ {day['stat_date']}")
            lines.append("")
            
            loss_pct = ((day['total_sales'] - median_sales) / median_sales * 100)
            loss_amount = max(median_sales - day['total_sales'], 0)
            avg_check = day['total_sales'] / day['total_orders'] if day['total_orders'] > 0 else 0
            
            lines.append("### üìä **–ö–õ–Æ–ß–ï–í–´–ï –¶–ò–§–†–´**")
            lines.append(f"- **–ü—Ä–æ–¥–∞–∂–∏:** {day['total_sales']:,.0f} IDR (–º–µ–¥–∏–∞–Ω–∞: {median_sales:,.0f} IDR) ‚Üí **{loss_pct:+.1f}%**")
            lines.append(f"- **–ü–æ—Ç–µ—Ä–∏:** {loss_amount:,.0f} IDR")
            lines.append(f"- **–ó–∞–∫–∞–∑—ã:** {day['total_orders']} —à—Ç")
            lines.append(f"- **–°—Ä–µ–¥–Ω–∏–π —á–µ–∫:** {avg_check:,.0f} IDR")
            lines.append("")
            
            # –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω
            lines.append("### üîç **–†–ï–ê–õ–¨–ù–´–ï –ü–†–ò–ß–ò–ù–´**")
            lines.append("")
            
            # –†–µ–∫–ª–∞–º–Ω—ã–π –±—é–¥–∂–µ—Ç
            avg_ads = df['total_ads_spend'].mean()
            if day['total_ads_spend'] < avg_ads * 0.7:
                drop_pct = ((avg_ads - day['total_ads_spend']) / avg_ads * 100)
                lines.append(f"**1. üî¥ –£–†–ï–ó–ê–ù–ò–ï –†–ï–ö–õ–ê–ú–ù–û–ì–û –ë–Æ–î–ñ–ï–¢–ê**")
                lines.append(f"- {day['total_ads_spend']:,.0f} IDR –ø—Ä–æ—Ç–∏–≤ –Ω–æ—Ä–º—ã {avg_ads:,.0f} IDR (-{drop_pct:.0f}%)")
                lines.append(f"- **–í–ª–∏—è–Ω–∏–µ:** ~{(avg_ads - day['total_ads_spend']) * 12:,.0f} IDR –ø–æ—Ç–µ—Ä—å")
                lines.append("")
            
            # –°—Ä–µ–¥–Ω–∏–π —á–µ–∫
            avg_check_period = (df['total_sales'] / df['total_orders']).mean()
            if avg_check < avg_check_period * 0.8:
                check_drop = ((avg_check_period - avg_check) / avg_check_period * 100)
                lines.append(f"**2. üî¥ –ü–ê–î–ï–ù–ò–ï –°–†–ï–î–ù–ï–ì–û –ß–ï–ö–ê**")
                lines.append(f"- {avg_check:,.0f} IDR –ø—Ä–æ—Ç–∏–≤ –Ω–æ—Ä–º—ã {avg_check_period:,.0f} IDR (-{check_drop:.0f}%)")
                lines.append(f"- **–í–ª–∏—è–Ω–∏–µ:** {(avg_check_period - avg_check) * day['total_orders']:,.0f} IDR –ø–æ—Ç–µ—Ä—å")
                lines.append("")
            
            # –í–Ω–µ—à–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã
            lines.append("### üåç **–í–ù–ï–®–ù–ò–ï –§–ê–ö–¢–û–†–´**")
            lines.append("")
            
            holiday_info = check_holiday_by_date(day['stat_date'])
            lines.append(f"**üïå –ü—Ä–∞–∑–¥–Ω–∏–∫–∏:** {holiday_info}")
            lines.append(f"**üåßÔ∏è –ü–æ–≥–æ–¥–∞:** —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Ç–µ–æ–¥–∞–Ω–Ω—ã—Ö")
            lines.append("")
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            lines.append("### üéØ **–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò**")
            lines.append("")
            
            if day['total_ads_spend'] < avg_ads * 0.7:
                potential = min(loss_amount * 0.6, 3000000)
                lines.append(f"**1. üî¥ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–π –±—é–¥–∂–µ—Ç –¥–æ {avg_ads:,.0f} IDR/–¥–µ–Ω—å**")
                lines.append(f"- **–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç:** {potential:,.0f} IDR")
                lines.append("")
            
            if avg_check < avg_check_period * 0.8:
                potential = min(loss_amount * 0.4, 2000000)
                lines.append(f"**2. üü° –ó–∞–ø—É—Å—Ç–∏—Ç—å upsell: –ø—Ä–æ–º–æ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ >400K IDR**")
                lines.append(f"- **–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç:** {potential:,.0f} IDR")
                lines.append("")
            
            # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∏—Ç–æ–≥
            total_potential = min(loss_amount * 0.8, 4000000)
            recovery_pct = (total_potential / loss_amount * 100) if loss_amount > 0 else 0
            
            lines.append("### üí∞ **–§–ò–ù–ê–ù–°–û–í–´–ô –ò–¢–û–ì**")
            lines.append(f"- **–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:** {total_potential:,.0f} IDR ({recovery_pct:.0f}% –æ—Ç –ø–æ—Ç–µ—Ä—å)")
        
        return "\n".join(lines)
        
    except Exception as e:
        return f"8. üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –î–ù–ò\n{'‚ïê' * 80}\n‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"


def check_holiday_by_date(date_str):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –ø–æ –¥–∞—Ç–µ"""
    try:
        from datetime import datetime
        date_obj = datetime.strptime(date_str, '%Y-%m-%d')
        month_day = date_obj.strftime('%m-%d')
        
        holidays = {
            '04-01': 'Eid al-Fitr (–æ–∫–æ–Ω—á–∞–Ω–∏–µ –†–∞–º–∞–¥–∞–Ω–∞) ‚Äî –∫—Ä—É–ø–Ω–µ–π—à–∏–π –º—É—Å—É–ª—å–º–∞–Ω—Å–∫–∏–π –ø—Ä–∞–∑–¥–Ω–∏–∫, –∫—É—Ä—å–µ—Ä—ã –æ—Ç–¥—ã—Ö–∞—é—Ç',
            '06-07': 'Eid al-Adha (–ö—É—Ä–±–∞–Ω-–±–∞–π—Ä–∞–º) ‚Äî –º—É—Å—É–ª—å–º–∞–Ω—Å–∫–∏–π –ø—Ä–∞–∑–¥–Ω–∏–∫ –∂–µ—Ä—Ç–≤–æ–ø—Ä–∏–Ω–æ—à–µ–Ω–∏—è',
            '03-31': 'Nyepi (–î–µ–Ω—å —Ç–∏—à–∏–Ω—ã) ‚Äî –±–∞–ª–∏–π—Å–∫–∏–π –Ω–æ–≤—ã–π –≥–æ–¥, –æ—Å—Ç—Ä–æ–≤ –∑–∞–∫—Ä—ã—Ç',
            '05-29': 'Galungan ‚Äî –±–∞–ª–∏–π—Å–∫–∏–π –ø—Ä–∞–∑–¥–Ω–∏–∫, —Å–Ω–∏–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ 20-30%',
            '06-08': 'Kuningan ‚Äî –±–∞–ª–∏–π—Å–∫–∏–π –ø—Ä–∞–∑–¥–Ω–∏–∫',
            '01-01': '–ù–æ–≤—ã–π –≥–æ–¥ ‚Äî –æ–±—ã—á–Ω–æ –£–í–ï–õ–ò–ß–ï–ù–ò–ï –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ 15-25%',
            '12-25': '–†–æ–∂–¥–µ—Å—Ç–≤–æ ‚Äî —Å–º–µ—à–∞–Ω–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ',
            '08-17': '–î–µ–Ω—å –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ò–Ω–¥–æ–Ω–µ–∑–∏–∏ ‚Äî –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–∞–∑–¥–Ω–∏–∫',
        }
        
        return holidays.get(month_day, '–æ–±—ã—á–Ω—ã–π –¥–µ–Ω—å, –Ω–µ –ø—Ä–∞–∑–¥–Ω–∏–∫')
    except:
        return '–æ–±—ã—á–Ω—ã–π –¥–µ–Ω—å'
